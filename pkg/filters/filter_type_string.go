// Code generated by "enumer -type=FilterType -json -output=C:\dev\go-octopusdeploy\pkg\filters\filter_type_string.go"; DO NOT EDIT.

package filters

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FilterTypeName = "ContinuousDailyScheduleCronExpressionScheduleDailyScheduleDaysPerMonthScheduleDaysPerWeekScheduleMachineFilterOnceDailyScheduleFeedFilterGitFilter"

var _FilterTypeIndex = [...]uint8{0, 23, 45, 58, 78, 97, 110, 127, 137, 146}

const _FilterTypeLowerName = "continuousdailyschedulecronexpressionscheduledailyscheduledayspermonthscheduledaysperweekschedulemachinefilteroncedailyschedulefeedfiltergitfilter"

func (i FilterType) String() string {
	if i < 0 || i >= FilterType(len(_FilterTypeIndex)-1) {
		return fmt.Sprintf("FilterType(%d)", i)
	}
	return _FilterTypeName[_FilterTypeIndex[i]:_FilterTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FilterTypeNoOp() {
	var x [1]struct{}
	_ = x[ContinuousDailySchedule-(0)]
	_ = x[CronExpressionSchedule-(1)]
	_ = x[DailySchedule-(2)]
	_ = x[DaysPerMonthSchedule-(3)]
	_ = x[DaysPerWeekSchedule-(4)]
	_ = x[MachineFilter-(5)]
	_ = x[OnceDailySchedule-(6)]
	_ = x[FeedFilter-(7)]
	_ = x[GitFilter-(8)]
}

var _FilterTypeValues = []FilterType{ContinuousDailySchedule, CronExpressionSchedule, DailySchedule, DaysPerMonthSchedule, DaysPerWeekSchedule, MachineFilter, OnceDailySchedule, FeedFilter, GitFilter}

var _FilterTypeNameToValueMap = map[string]FilterType{
	_FilterTypeName[0:23]:         ContinuousDailySchedule,
	_FilterTypeLowerName[0:23]:    ContinuousDailySchedule,
	_FilterTypeName[23:45]:        CronExpressionSchedule,
	_FilterTypeLowerName[23:45]:   CronExpressionSchedule,
	_FilterTypeName[45:58]:        DailySchedule,
	_FilterTypeLowerName[45:58]:   DailySchedule,
	_FilterTypeName[58:78]:        DaysPerMonthSchedule,
	_FilterTypeLowerName[58:78]:   DaysPerMonthSchedule,
	_FilterTypeName[78:97]:        DaysPerWeekSchedule,
	_FilterTypeLowerName[78:97]:   DaysPerWeekSchedule,
	_FilterTypeName[97:110]:       MachineFilter,
	_FilterTypeLowerName[97:110]:  MachineFilter,
	_FilterTypeName[110:127]:      OnceDailySchedule,
	_FilterTypeLowerName[110:127]: OnceDailySchedule,
	_FilterTypeName[127:137]:      FeedFilter,
	_FilterTypeLowerName[127:137]: FeedFilter,
	_FilterTypeName[137:146]:      GitFilter,
	_FilterTypeLowerName[137:146]: GitFilter,
}

var _FilterTypeNames = []string{
	_FilterTypeName[0:23],
	_FilterTypeName[23:45],
	_FilterTypeName[45:58],
	_FilterTypeName[58:78],
	_FilterTypeName[78:97],
	_FilterTypeName[97:110],
	_FilterTypeName[110:127],
	_FilterTypeName[127:137],
	_FilterTypeName[137:146],
}

// FilterTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FilterTypeString(s string) (FilterType, error) {
	if val, ok := _FilterTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FilterTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FilterType values", s)
}

// FilterTypeValues returns all values of the enum
func FilterTypeValues() []FilterType {
	return _FilterTypeValues
}

// FilterTypeStrings returns a slice of all String values of the enum
func FilterTypeStrings() []string {
	strs := make([]string, len(_FilterTypeNames))
	copy(strs, _FilterTypeNames)
	return strs
}

// IsAFilterType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FilterType) IsAFilterType() bool {
	for _, v := range _FilterTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FilterType
func (i FilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FilterType
func (i *FilterType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FilterType should be a string, got %s", data)
	}

	var err error
	*i, err = FilterTypeString(s)
	return err
}

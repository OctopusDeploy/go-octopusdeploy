// Code generated by "enumer -type=ScheduledTriggerFilterRunType -json -output scheduled_trigger_filter_run_type_string.go"; DO NOT EDIT.

//
package filters

import (
	"encoding/json"
	"fmt"
)

const _ScheduledTriggerFilterRunTypeName = "ScheduledTimeContinuously"

var _ScheduledTriggerFilterRunTypeIndex = [...]uint8{0, 13, 25}

func (i ScheduledTriggerFilterRunType) String() string {
	if i < 0 || i >= ScheduledTriggerFilterRunType(len(_ScheduledTriggerFilterRunTypeIndex)-1) {
		return fmt.Sprintf("ScheduledTriggerFilterRunType(%d)", i)
	}
	return _ScheduledTriggerFilterRunTypeName[_ScheduledTriggerFilterRunTypeIndex[i]:_ScheduledTriggerFilterRunTypeIndex[i+1]]
}

var _ScheduledTriggerFilterRunTypeValues = []ScheduledTriggerFilterRunType{0, 1}

var _ScheduledTriggerFilterRunTypeNameToValueMap = map[string]ScheduledTriggerFilterRunType{
	_ScheduledTriggerFilterRunTypeName[0:13]:  0,
	_ScheduledTriggerFilterRunTypeName[13:25]: 1,
}

// ScheduledTriggerFilterRunTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ScheduledTriggerFilterRunTypeString(s string) (ScheduledTriggerFilterRunType, error) {
	if val, ok := _ScheduledTriggerFilterRunTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ScheduledTriggerFilterRunType values", s)
}

// ScheduledTriggerFilterRunTypeValues returns all values of the enum
func ScheduledTriggerFilterRunTypeValues() []ScheduledTriggerFilterRunType {
	return _ScheduledTriggerFilterRunTypeValues
}

// IsAScheduledTriggerFilterRunType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ScheduledTriggerFilterRunType) IsAScheduledTriggerFilterRunType() bool {
	for _, v := range _ScheduledTriggerFilterRunTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ScheduledTriggerFilterRunType
func (i ScheduledTriggerFilterRunType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ScheduledTriggerFilterRunType
func (i *ScheduledTriggerFilterRunType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ScheduledTriggerFilterRunType should be a string, got %s", data)
	}

	var err error
	*i, err = ScheduledTriggerFilterRunTypeString(s)
	return err
}

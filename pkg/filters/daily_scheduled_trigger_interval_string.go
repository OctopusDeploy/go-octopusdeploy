// Code generated by "enumer -type=DailyScheduledInterval -json -output daily_scheduled_trigger_interval_string.go"; DO NOT EDIT.

//
package filters

import (
	"encoding/json"
	"fmt"
)

const _DailyScheduledIntervalName = "OnceDailyOnceHourlyOnceEveryMinute"

var _DailyScheduledIntervalIndex = [...]uint8{0, 9, 19, 34}

func (i DailyScheduledInterval) String() string {
	if i < 0 || i >= DailyScheduledInterval(len(_DailyScheduledIntervalIndex)-1) {
		return fmt.Sprintf("DailyScheduledInterval(%d)", i)
	}
	return _DailyScheduledIntervalName[_DailyScheduledIntervalIndex[i]:_DailyScheduledIntervalIndex[i+1]]
}

var _DailyScheduledIntervalValues = []DailyScheduledInterval{0, 1, 2}

var _DailyScheduledIntervalNameToValueMap = map[string]DailyScheduledInterval{
	_DailyScheduledIntervalName[0:9]:   0,
	_DailyScheduledIntervalName[9:19]:  1,
	_DailyScheduledIntervalName[19:34]: 2,
}

// DailyScheduledIntervalString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DailyScheduledIntervalString(s string) (DailyScheduledInterval, error) {
	if val, ok := _DailyScheduledIntervalNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DailyScheduledInterval values", s)
}

// DailyScheduledIntervalValues returns all values of the enum
func DailyScheduledIntervalValues() []DailyScheduledInterval {
	return _DailyScheduledIntervalValues
}

// IsADailyScheduledInterval returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DailyScheduledInterval) IsADailyScheduledInterval() bool {
	for _, v := range _DailyScheduledIntervalValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DailyScheduledInterval
func (i DailyScheduledInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DailyScheduledInterval
func (i *DailyScheduledInterval) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DailyScheduledInterval should be a string, got %s", data)
	}

	var err error
	*i, err = DailyScheduledIntervalString(s)
	return err
}

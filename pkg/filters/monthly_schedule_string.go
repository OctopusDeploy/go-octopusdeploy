// Code generated by "enumer -type=MonthlySchedule -json -output monthly_schedule_string.go"; DO NOT EDIT.

//
package filters

import (
	"encoding/json"
	"fmt"
)

const _MonthlyScheduleName = "DateOfMonthDayOfMonth"

var _MonthlyScheduleIndex = [...]uint8{0, 11, 21}

func (i MonthlySchedule) String() string {
	if i < 0 || i >= MonthlySchedule(len(_MonthlyScheduleIndex)-1) {
		return fmt.Sprintf("MonthlySchedule(%d)", i)
	}
	return _MonthlyScheduleName[_MonthlyScheduleIndex[i]:_MonthlyScheduleIndex[i+1]]
}

var _MonthlyScheduleValues = []MonthlySchedule{0, 1}

var _MonthlyScheduleNameToValueMap = map[string]MonthlySchedule{
	_MonthlyScheduleName[0:11]:  0,
	_MonthlyScheduleName[11:21]: 1,
}

// MonthlyScheduleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MonthlyScheduleString(s string) (MonthlySchedule, error) {
	if val, ok := _MonthlyScheduleNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MonthlySchedule values", s)
}

// MonthlyScheduleValues returns all values of the enum
func MonthlyScheduleValues() []MonthlySchedule {
	return _MonthlyScheduleValues
}

// IsAMonthlySchedule returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MonthlySchedule) IsAMonthlySchedule() bool {
	for _, v := range _MonthlyScheduleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MonthlySchedule
func (i MonthlySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MonthlySchedule
func (i *MonthlySchedule) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MonthlySchedule should be a string, got %s", data)
	}

	var err error
	*i, err = MonthlyScheduleString(s)
	return err
}

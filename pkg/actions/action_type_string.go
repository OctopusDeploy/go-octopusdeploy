// Code generated by "enumer -type=ActionType -json -output action_type_string.go"; DO NOT EDIT.

//
package actions

import (
	"encoding/json"
	"fmt"
)

const _ActionTypeName = "AutoDeployDeployLatestReleaseDeployNewReleaseRunRunbook"

var _ActionTypeIndex = [...]uint8{0, 10, 29, 45, 55}

func (i ActionType) String() string {
	if i < 0 || i >= ActionType(len(_ActionTypeIndex)-1) {
		return fmt.Sprintf("ActionType(%d)", i)
	}
	return _ActionTypeName[_ActionTypeIndex[i]:_ActionTypeIndex[i+1]]
}

var _ActionTypeValues = []ActionType{0, 1, 2, 3}

var _ActionTypeNameToValueMap = map[string]ActionType{
	_ActionTypeName[0:10]:  0,
	_ActionTypeName[10:29]: 1,
	_ActionTypeName[29:45]: 2,
	_ActionTypeName[45:55]: 3,
}

// ActionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionTypeString(s string) (ActionType, error) {
	if val, ok := _ActionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActionType values", s)
}

// ActionTypeValues returns all values of the enum
func ActionTypeValues() []ActionType {
	return _ActionTypeValues
}

// IsAActionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActionType) IsAActionType() bool {
	for _, v := range _ActionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActionType
func (i ActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActionType
func (i *ActionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActionType should be a string, got %s", data)
	}

	var err error
	*i, err = ActionTypeString(s)
	return err
}

// Code generated by "enumer -type=ActionType -json -output action_type_string.go"; DO NOT EDIT.

package actions

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActionTypeName = "AutoDeployDeployLatestReleaseDeployNewReleaseRunRunbookCreateRelease"

var _ActionTypeIndex = [...]uint8{0, 10, 29, 45, 55, 68}

const _ActionTypeLowerName = "autodeploydeploylatestreleasedeploynewreleaserunrunbookcreaterelease"

func (i ActionType) String() string {
	if i < 0 || i >= ActionType(len(_ActionTypeIndex)-1) {
		return fmt.Sprintf("ActionType(%d)", i)
	}
	return _ActionTypeName[_ActionTypeIndex[i]:_ActionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionTypeNoOp() {
	var x [1]struct{}
	_ = x[AutoDeploy-(0)]
	_ = x[DeployLatestRelease-(1)]
	_ = x[DeployNewRelease-(2)]
	_ = x[RunRunbook-(3)]
	_ = x[CreateRelease-(4)]
}

var _ActionTypeValues = []ActionType{AutoDeploy, DeployLatestRelease, DeployNewRelease, RunRunbook, CreateRelease}

var _ActionTypeNameToValueMap = map[string]ActionType{
	_ActionTypeName[0:10]:       AutoDeploy,
	_ActionTypeLowerName[0:10]:  AutoDeploy,
	_ActionTypeName[10:29]:      DeployLatestRelease,
	_ActionTypeLowerName[10:29]: DeployLatestRelease,
	_ActionTypeName[29:45]:      DeployNewRelease,
	_ActionTypeLowerName[29:45]: DeployNewRelease,
	_ActionTypeName[45:55]:      RunRunbook,
	_ActionTypeLowerName[45:55]: RunRunbook,
	_ActionTypeName[55:68]:      CreateRelease,
	_ActionTypeLowerName[55:68]: CreateRelease,
}

var _ActionTypeNames = []string{
	_ActionTypeName[0:10],
	_ActionTypeName[10:29],
	_ActionTypeName[29:45],
	_ActionTypeName[45:55],
	_ActionTypeName[55:68],
}

// ActionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionTypeString(s string) (ActionType, error) {
	if val, ok := _ActionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActionType values", s)
}

// ActionTypeValues returns all values of the enum
func ActionTypeValues() []ActionType {
	return _ActionTypeValues
}

// ActionTypeStrings returns a slice of all String values of the enum
func ActionTypeStrings() []string {
	strs := make([]string, len(_ActionTypeNames))
	copy(strs, _ActionTypeNames)
	return strs
}

// IsAActionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActionType) IsAActionType() bool {
	for _, v := range _ActionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActionType
func (i ActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActionType
func (i *ActionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActionType should be a string, got %s", data)
	}

	var err error
	*i, err = ActionTypeString(s)
	return err
}
